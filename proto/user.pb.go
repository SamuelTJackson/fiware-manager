// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID,json=id,omitempty" json:"UserID,omitempty"`
	KeyrockToken string `protobuf:"bytes,2,opt,name=KeyrockToken,json=keyrock_token" json:"KeyrockToken,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email,omitempty"`
	Username     string `protobuf:"bytes,4,opt,name=Username,json=username" json:"Username,omitempty"`
	LoraKey      string `protobuf:"bytes,5,opt,name=LoraKey,json=lora_key" json:"LoraKey,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *User) GetKeyrockToken() string {
	if m != nil {
		return m.KeyrockToken
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetLoraKey() string {
	if m != nil {
		return m.LoraKey
	}
	return ""
}

type LoginUserRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *LoginUserRequest) Reset()                    { *m = LoginUserRequest{} }
func (m *LoginUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*LoginUserRequest) ProtoMessage()               {}
func (*LoginUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *LoginUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginUserResponse struct {
	Jwt string `protobuf:"bytes,1,opt,name=Jwt" json:"Jwt,omitempty"`
}

func (m *LoginUserResponse) Reset()                    { *m = LoginUserResponse{} }
func (m *LoginUserResponse) String() string            { return proto1.CompactTextString(m) }
func (*LoginUserResponse) ProtoMessage()               {}
func (*LoginUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *LoginUserResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type LogoutUserRequest struct {
	Jwt string `protobuf:"bytes,2,opt,name=Jwt" json:"Jwt,omitempty"`
}

func (m *LogoutUserRequest) Reset()                    { *m = LogoutUserRequest{} }
func (m *LogoutUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*LogoutUserRequest) ProtoMessage()               {}
func (*LogoutUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *LogoutUserRequest) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type GetUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *GetUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type AddUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *AddUserRequest) Reset()                    { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()               {}
func (*AddUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *AddUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RemoveUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *RemoveUserRequest) Reset()                    { *m = RemoveUserRequest{} }
func (m *RemoveUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemoveUserRequest) ProtoMessage()               {}
func (*RemoveUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *RemoveUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type AddLorakeyRequest struct {
	Key    string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *AddLorakeyRequest) Reset()                    { *m = AddLorakeyRequest{} }
func (m *AddLorakeyRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddLorakeyRequest) ProtoMessage()               {}
func (*AddLorakeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *AddLorakeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AddLorakeyRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type RemoveLorakeyRequest struct {
	Key    string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *RemoveLorakeyRequest) Reset()                    { *m = RemoveLorakeyRequest{} }
func (m *RemoveLorakeyRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemoveLorakeyRequest) ProtoMessage()               {}
func (*RemoveLorakeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *RemoveLorakeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RemoveLorakeyRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetLorakeyRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *GetLorakeyRequest) Reset()                    { *m = GetLorakeyRequest{} }
func (m *GetLorakeyRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetLorakeyRequest) ProtoMessage()               {}
func (*GetLorakeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *GetLorakeyRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetLorakeyResponse struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *GetLorakeyResponse) Reset()                    { *m = GetLorakeyResponse{} }
func (m *GetLorakeyResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetLorakeyResponse) ProtoMessage()               {}
func (*GetLorakeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *GetLorakeyResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func init() {
	proto1.RegisterType((*User)(nil), "proto.User")
	proto1.RegisterType((*LoginUserRequest)(nil), "proto.LoginUserRequest")
	proto1.RegisterType((*LoginUserResponse)(nil), "proto.LoginUserResponse")
	proto1.RegisterType((*LogoutUserRequest)(nil), "proto.LogoutUserRequest")
	proto1.RegisterType((*GetUserRequest)(nil), "proto.GetUserRequest")
	proto1.RegisterType((*GetUserResponse)(nil), "proto.GetUserResponse")
	proto1.RegisterType((*AddUserRequest)(nil), "proto.AddUserRequest")
	proto1.RegisterType((*RemoveUserRequest)(nil), "proto.RemoveUserRequest")
	proto1.RegisterType((*AddLorakeyRequest)(nil), "proto.AddLorakeyRequest")
	proto1.RegisterType((*RemoveLorakeyRequest)(nil), "proto.RemoveLorakeyRequest")
	proto1.RegisterType((*GetLorakeyRequest)(nil), "proto.GetLorakeyRequest")
	proto1.RegisterType((*GetLorakeyResponse)(nil), "proto.GetLorakeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	AddLorakey(ctx context.Context, in *AddLorakeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	RemoveLorakey(ctx context.Context, in *RemoveLorakeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetLorakey(ctx context.Context, in *GetLorakeyRequest, opts ...grpc.CallOption) (*GetLorakeyResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/proto.UserService/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/proto.UserService/RemoveUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddLorakey(ctx context.Context, in *AddLorakeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/proto.UserService/AddLorakey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveLorakey(ctx context.Context, in *RemoveLorakeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/proto.UserService/RemoveLorakey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLorakey(ctx context.Context, in *GetLorakeyRequest, opts ...grpc.CallOption) (*GetLorakeyResponse, error) {
	out := new(GetLorakeyResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetLorakey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/LoginUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/proto.UserService/LogoutUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	AddUser(context.Context, *AddUserRequest) (*google_protobuf1.Empty, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*google_protobuf1.Empty, error)
	AddLorakey(context.Context, *AddLorakeyRequest) (*google_protobuf1.Empty, error)
	RemoveLorakey(context.Context, *RemoveLorakeyRequest) (*google_protobuf1.Empty, error)
	GetLorakey(context.Context, *GetLorakeyRequest) (*GetLorakeyResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	LogoutUser(context.Context, *LogoutUserRequest) (*google_protobuf1.Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddLorakey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLorakeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddLorakey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/AddLorakey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddLorakey(ctx, req.(*AddLorakeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveLorakey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLorakeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveLorakey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/RemoveLorakey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveLorakey(ctx, req.(*RemoveLorakeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLorakey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLorakeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLorakey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetLorakey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLorakey(ctx, req.(*GetLorakeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/LogoutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LogoutUser(ctx, req.(*LogoutUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _UserService_RemoveUser_Handler,
		},
		{
			MethodName: "AddLorakey",
			Handler:    _UserService_AddLorakey_Handler,
		},
		{
			MethodName: "RemoveLorakey",
			Handler:    _UserService_RemoveLorakey_Handler,
		},
		{
			MethodName: "GetLorakey",
			Handler:    _UserService_GetLorakey_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _UserService_LogoutUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto1.RegisterFile("user.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x6d, 0xd2, 0xb8, 0x1f, 0x93, 0xb6, 0xd4, 0xab, 0x12, 0x5c, 0x17, 0x09, 0x64, 0x84, 0x54,
	0xa9, 0x95, 0x2b, 0xc2, 0x0d, 0x09, 0x29, 0x15, 0x2d, 0x15, 0xa4, 0x07, 0x14, 0xe0, 0x5c, 0xb9,
	0xf5, 0x10, 0x59, 0x8e, 0xbd, 0x61, 0xbd, 0x6e, 0xe5, 0x3f, 0xc2, 0x81, 0x5f, 0x8b, 0xf6, 0x03,
	0x7b, 0x6d, 0x93, 0x10, 0xf5, 0x64, 0xcf, 0xcc, 0x9b, 0x37, 0xb3, 0xef, 0x69, 0x00, 0xf2, 0x0c,
	0x99, 0x3f, 0x67, 0x94, 0x53, 0x62, 0xc9, 0x8f, 0x7b, 0x34, 0xa5, 0x74, 0x3a, 0xc3, 0x33, 0x19,
	0xdd, 0xe6, 0x3f, 0xce, 0x30, 0x99, 0xf3, 0x42, 0x61, 0xbc, 0x5f, 0x1d, 0xe8, 0x7d, 0xcf, 0x90,
	0x91, 0xe7, 0xb0, 0x21, 0xbe, 0x9f, 0x2e, 0x9c, 0xce, 0xcb, 0xce, 0xf1, 0xf6, 0x64, 0x27, 0x0a,
	0x4f, 0x69, 0x12, 0x71, 0x09, 0x26, 0xaf, 0x60, 0x67, 0x8c, 0x05, 0xa3, 0x77, 0xf1, 0x37, 0x1a,
	0x63, 0xea, 0x74, 0x25, 0x66, 0x37, 0x56, 0xb9, 0x1b, 0x2e, 0x92, 0xe4, 0x00, 0xac, 0xcb, 0x24,
	0x88, 0x66, 0xce, 0xba, 0xac, 0x5a, 0x28, 0x02, 0xe2, 0xc2, 0x96, 0x20, 0x4e, 0x83, 0x04, 0x9d,
	0x9e, 0x2c, 0x6c, 0xe5, 0x3a, 0x26, 0x87, 0xb0, 0x79, 0x4d, 0x59, 0x30, 0xc6, 0xc2, 0xb1, 0x54,
	0x69, 0x46, 0x59, 0x70, 0x13, 0x63, 0xe1, 0x5d, 0xc0, 0xfe, 0x35, 0x9d, 0x46, 0xa9, 0xe8, 0x9d,
	0xe0, 0xcf, 0x1c, 0x33, 0x5e, 0x0d, 0x50, 0x2b, 0xaa, 0x40, 0x0c, 0xf8, 0x12, 0x64, 0xd9, 0x03,
	0x65, 0xa1, 0xde, 0xab, 0x8c, 0xbd, 0xd7, 0x60, 0x1b, 0x2c, 0xd9, 0x9c, 0xa6, 0x19, 0x92, 0x7d,
	0x58, 0xff, 0xfc, 0xc0, 0x35, 0x89, 0xf8, 0xd5, 0x30, 0x9a, 0x73, 0x73, 0x9a, 0x86, 0x75, 0x2b,
	0xd8, 0x31, 0xec, 0x5d, 0x61, 0x0d, 0x33, 0x68, 0xa8, 0xa6, 0x23, 0x6f, 0x08, 0x4f, 0x4a, 0xa4,
	0x9e, 0xfa, 0x42, 0x09, 0x2d, 0x81, 0xfd, 0x61, 0x5f, 0xe9, 0xef, 0x4b, 0x88, 0x2c, 0x78, 0x6f,
	0x60, 0xef, 0x3c, 0x0c, 0x4d, 0xf6, 0xff, 0xb6, 0x9c, 0x80, 0x3d, 0xc1, 0x84, 0xde, 0xe3, 0x2a,
	0x3b, 0xbd, 0x07, 0xfb, 0x3c, 0x0c, 0x85, 0xde, 0x31, 0x16, 0xc6, 0x23, 0x85, 0xfa, 0x5a, 0x8b,
	0x31, 0x16, 0x46, 0x7b, 0xb7, 0xd6, 0x3e, 0x82, 0x03, 0x35, 0xeb, 0xd1, 0x0c, 0x27, 0x60, 0x5f,
	0x21, 0x6f, 0xb4, 0x2f, 0xda, 0xf6, 0x14, 0x88, 0x09, 0xd6, 0x22, 0x2e, 0x40, 0x0f, 0x7f, 0xf7,
	0xa0, 0x2f, 0x7e, 0xbf, 0x22, 0xbb, 0x8f, 0xee, 0x90, 0xbc, 0x83, 0x4d, 0xad, 0x3f, 0x79, 0xaa,
	0x65, 0xab, 0x3b, 0xe7, 0x0e, 0x9a, 0x69, 0x35, 0xc1, 0x5b, 0x13, 0xbd, 0xda, 0x87, 0xb2, 0xb7,
	0xee, 0x8b, 0x3b, 0xf0, 0xd5, 0x49, 0xf9, 0x7f, 0x4f, 0xca, 0xbf, 0x14, 0x57, 0xe2, 0xad, 0x91,
	0x11, 0x40, 0x65, 0x08, 0x71, 0x74, 0x7b, 0xcb, 0xa3, 0xe5, 0x0c, 0x95, 0x4b, 0x25, 0x43, 0xcb,
	0xb8, 0x25, 0x0c, 0x1f, 0x61, 0xb7, 0x66, 0x14, 0x39, 0xaa, 0xad, 0xb1, 0x32, 0xcf, 0x07, 0x80,
	0xca, 0x81, 0x72, 0x93, 0x96, 0x83, 0xee, 0xe1, 0x3f, 0x2a, 0xa5, 0x98, 0x23, 0xd8, 0x2e, 0x0f,
	0x90, 0x3c, 0xd3, 0xc8, 0xe6, 0x61, 0xbb, 0x4e, 0xbb, 0x60, 0x30, 0x40, 0x75, 0x9b, 0xc4, 0x40,
	0xd6, 0xcf, 0x75, 0xf1, 0x43, 0x6e, 0x37, 0x64, 0xe6, 0xed, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe5, 0x6d, 0x32, 0x0b, 0x1c, 0x05, 0x00, 0x00,
}
